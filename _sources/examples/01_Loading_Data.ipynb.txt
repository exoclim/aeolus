{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loading Unified Model output"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For convenience, `aeolus` provides a way of keeping loaded and processed data within one object along with extra metadata.\n",
    "The object is called `Run` (as in \"simulation run\"). \n",
    "The code below provides an example of basic usage of `Run`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "import iris\n",
    "\n",
    "from aeolus.core import Run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that you can use either a single filename or a list of filenames, each of which is either a `str` or (recommended) `pathlib.Path` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_file = Path.cwd() / \"sample_data\" / \"sample_t1e_2d_mean.pp\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While instantiating `Run`, it is possible to add a short name, a long description of the experiment; and to specify a planet configuration with relevant constants (see \"Physical constants\" example for more info)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_run = Run(\n",
    "    files=sample_file,\n",
    "    name=\"t1e_example\",\n",
    "    description=\"This is some sample data from a UM simulation of tidally-locked Trappist-1e planet.\",\n",
    "    planet=\"trap1e\",  # this reads constants from a JSON file\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<aeolus.core.Run at 0x7f3b36b31430>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Constants that have been used in the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Trap1eConstants(earth_day [s], stefan_boltzmann [W m-2 K-4], water_heat_vaporization [m2 s-2], water_molecular_weight [kg mol-1], molar_gas_constant [J K-1 mol-1], boltzmann [m^2 kg s^-2 K^-1], avogadro [mol-1], gravity [m s-2], radius [m], day [s], solar_constant [W m-2], reference_surface_pressure [Pa], semi_major_axis [au], eccentricity [1], obliquity [degree], dry_air_spec_heat_press [m2 s-2 K-1], dry_air_molecular_weight [kg mol-1], condensible_density [kg m-3], condensible_heat_vaporization [m2 s-2])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_run.const"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The loaded data are stored as a `CubeList` under `raw` attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: convective_rainfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "1: convective_snowfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "2: high_type_cloud_area_fraction / (1) (latitude: 90; longitude: 144)\n",
      "3: low_type_cloud_area_fraction / (1)  (latitude: 90; longitude: 144)\n",
      "4: medium_type_cloud_area_fraction / (1) (latitude: 90; longitude: 144)\n",
      "5: stratiform_rainfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "6: stratiform_snowfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n"
     ]
    }
   ],
   "source": [
    "print(my_run.raw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Minimal processing of loaded data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step might involve some clean-up and post-processing of raw data.\n",
    "\n",
    "This is done by creating a function that takes `iris.cube.CubeList` as its 1st argument and returns another `iris.cube.CubeList` as output.\n",
    "The function is then passed to `Run.proc_data()` and its output stored as `Run.proc` attribute."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, the function `roll_cube_pm180()` imported below takes a `Cube` and rolls its longitudes from 0...360 to -180...180."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aeolus.coord import ensure_bounds, roll_cube_pm180"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can then be applied to all `raw` cubes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _prepare_cubes(cubelist):\n",
    "    \"\"\"Post-process data for easier analysis.\"\"\"\n",
    "    # Roll cubes\n",
    "    r_cubes = iris.cube.CubeList()\n",
    "    for cube in cubelist:\n",
    "        r_c = roll_cube_pm180(cube)\n",
    "        ensure_bounds(r_c)  # also, ensure that longitudes and latitudes have bounds\n",
    "        r_cubes.append(r_c)\n",
    "\n",
    "    return r_cubes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_run.proc_data(_prepare_cubes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: convective_rainfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "1: convective_snowfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "2: high_type_cloud_area_fraction / (1) (latitude: 90; longitude: 144)\n",
      "3: low_type_cloud_area_fraction / (1)  (latitude: 90; longitude: 144)\n",
      "4: medium_type_cloud_area_fraction / (1) (latitude: 90; longitude: 144)\n",
      "5: stratiform_rainfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n",
      "6: stratiform_snowfall_flux / (kg m-2 s-1) (latitude: 90; longitude: 144)\n"
     ]
    }
   ],
   "source": [
    "print(my_run.proc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check that it did what expected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DimCoord(array([ 1.25,  3.75,  6.25,  8.75, 11.25, 13.75, 16.25, 18.75, 21.25,\n",
      "       23.75], dtype=float32), standard_name='longitude', units=Unit('degrees'), coord_system=GeogCS(6371229.0))\n"
     ]
    }
   ],
   "source": [
    "print(my_run.raw.extract_cube(\"convective_rainfall_flux\").coord(\"longitude\")[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DimCoord(array([-178.75, -176.25, -173.75, -171.25, -168.75, -166.25, -163.75,\n",
      "       -161.25, -158.75, -156.25]), bounds=array([[-180. , -177.5],\n",
      "       [-177.5, -175. ],\n",
      "       [-175. , -172.5],\n",
      "       [-172.5, -170. ],\n",
      "       [-170. , -167.5],\n",
      "       [-167.5, -165. ],\n",
      "       [-165. , -162.5],\n",
      "       [-162.5, -160. ],\n",
      "       [-160. , -157.5],\n",
      "       [-157.5, -155. ]]), standard_name='longitude', units=Unit('degrees'), coord_system=GeogCS(5804071.0))\n"
     ]
    }
   ],
   "source": [
    "print(my_run.proc.extract_cube(\"convective_rainfall_flux\").coord(\"longitude\")[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the longitude coordinate is not only shifted by 180 degrees, but has automatically calculated `bounds`.\n",
    "\n",
    "In addition, note that `coord_system` in `proc` cubes is different, because it used `Run.const` attribute to redefine the planet radius correctly.\n",
    "By default the loaded raw data has Earth radius in its `coord_system`, so certain calculations (e.g. grid cell areas) might be incorrect."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:aeolus_py38]",
   "language": "python",
   "name": "conda-env-aeolus_py38-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
